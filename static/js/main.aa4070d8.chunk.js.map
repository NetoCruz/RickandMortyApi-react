{"version":3,"sources":["components/Navbar.js","components/Modal.js","components/Profile.js","components/PageLoading.js","components/Personajes.js","App.js","info.js","components/Apps.js","serviceWorker.js","index.js","images/rick.png","logo.svg"],"names":["Navbar","react_default","a","createElement","className","src","Logo","Component","Modal","state","data","results","modalIsOpen","this","setState","props","isOpen","ReactDOM","createPortal","claasName","onClick","onClose","console","log","document","getElementById","React","Profile","character","map","badge","key","id","react_router_dom","to","concat","image","name","PageLoading","defaultOptions","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","dist_default","options","height","width","Personajes","nextPage","loading","error","handleOpenModal","e","_this","handleCloseModal","fetchData","_callee","response","regenerator_default","wrap","_context","prev","next","fetch","sent","json","info","t0","stop","_this2","components_PageLoading","components_Profile","onOpen","components_Modal","App","components_Navbar","components_Personajes","Info","match","params","infoId","parseInt","class","alt","status","gender","species","Apps","react_router","exact","path","component","Boolean","window","location","hostname","render","components_Apps","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.aa4070d8.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./styles/navbar.css\";\r\nimport Logo from \"../images/rick.png\";\r\n\r\nclass Navbar extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"nav\">\r\n        <img src={Logo} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./styles/modal.css\";\r\n\r\nclass Modal extends React.Component {\r\n  state = {\r\n    data: {\r\n      results: []\r\n    },\r\n    modalIsOpen: false\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.setState({ data: this.props.data.results });\r\n  }\r\n  render() {\r\n    if (!this.props.isOpen) {\r\n      return null;\r\n    }\r\n    return ReactDOM.createPortal(\r\n      <div className=\"Modal\">\r\n        <div className=\"Modal__container\">\r\n          <button claasName=\"Modal__close-button\" onClick={this.props.onClose}>\r\n            X\r\n          </button>\r\n          <div />\r\n          <div>{console.log(this.props.data.results)}</div>\r\n          <div />\r\n        </div>\r\n      </div>,\r\n      document.getElementById(\"modal\")\r\n    );\r\n  }\r\n}\r\nexport default Modal;\r\n","import React, { Component } from \"react\";\r\nimport \"./styles/navbar.css\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Modal from \"./Modal\";\r\nimport \"./styles/Badge.css\";\r\nclass Profile extends Component {\r\n  state = {\r\n    // modalIsOpen: false\r\n  };\r\n\r\n  // handleOpenModal = e => {\r\n  //   this.setState({ modalIsOpen: true });\r\n  // };\r\n\r\n  // handleCloseModal = e => {\r\n  //   this.setState({ modalIsOpen: false });\r\n  // };\r\n  render() {\r\n    return (\r\n      <div>\r\n        <ul className=\"grid-container\">\r\n          {this.props.character.map(badge => {\r\n            return (\r\n              <li className=\"grid-item profile\" key={badge.id}>\r\n                <Link to={`/characters/${badge.id}`}>\r\n                  <img src={badge.image} />\r\n                </Link>\r\n                <div className=\"name__card\">{badge.name}</div>\r\n                {/* <Modal\r\n                  onClose={this.handleCloseModal}\r\n                  isOpen={this.state.modalIsOpen}\r\n                  name={badge.name}\r\n                /> */}\r\n              </li>\r\n            );\r\n          })}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Profile;\r\n","import React from \"react\";\r\nimport Lottie from \"react-lottie\";\r\nimport animationData from \"../images/load.json\";\r\n\r\nfunction PageLoading() {\r\n  const defaultOptions = {\r\n    loop: true,\r\n    autoplay: true,\r\n    animationData: animationData,\r\n    rendererSettings: {\r\n      preserveAspectRatio: \"xMidYMid slice\"\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Lottie options={defaultOptions} height={200} width={200} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PageLoading;\r\n","import React, { Component } from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport Modal from \"./Modal\";\r\nimport PageLoading from \"./PageLoading\";\r\n\r\nclass Personajes extends Component {\r\n  state = {\r\n    nextPage: 1,\r\n    loading: true,\r\n    error: null,\r\n    data: {\r\n      results: []\r\n    },\r\n    modalIsOpen: false\r\n  };\r\n\r\n  handleOpenModal = e => {\r\n    this.setState({ modalIsOpen: true });\r\n  };\r\n\r\n  handleCloseModal = e => {\r\n    this.setState({ modalIsOpen: false });\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.fetchData();\r\n  }\r\n\r\n  fetchData = async () => {\r\n    this.setState({ loading: true, error: null });\r\n    try {\r\n      const response = await fetch(\r\n        `https://rickandmortyapi.com/api/character?page=${this.state.nextPage}`\r\n      );\r\n      const data = await response.json();\r\n\r\n      this.setState({\r\n        loading: false,\r\n        data: {\r\n          info: data.info,\r\n          results: [].concat(this.state.data.results, data.results)\r\n        },\r\n        nextPage: this.state.nextPage + 1\r\n      });\r\n      console.log(data);\r\n    } catch (error) {\r\n      this.setState({ loading: false, error: true });\r\n    }\r\n  };\r\n  render() {\r\n    console.log(this.state.data.results);\r\n    if (this.state.loading === true) {\r\n      return <PageLoading />;\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <Profile\r\n          onOpen={this.handleOpenModal}\r\n          character={this.state.data.results}\r\n        />\r\n        <button className=\"btn btn-primary\" onClick={() => this.fetchData()}>\r\n          Load More\r\n        </button>\r\n        <Modal\r\n          data={this.state.data}\r\n          onClose={this.handleCloseModal}\r\n          isOpen={this.state.modalIsOpen}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Personajes;\r\n","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Navbar from \"./components/Navbar\";\nimport Personajes from \"./components/Personajes\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Navbar />\n        <Personajes />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from \"react\";\r\nimport confLogo from \"./images/rick.png\";\r\nimport \"./components/styles/Badge.css\";\r\nimport PageLoading from \"./components/PageLoading\";\r\n\r\nclass Info extends Component {\r\n  state = {\r\n    id: this.props.match.params.infoId,\r\n    loading: true,\r\n    error: null,\r\n    data: {\r\n      results: []\r\n    }\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.fetchData();\r\n  }\r\n\r\n  fetchData = async () => {\r\n    this.setState({ loading: true, error: null });\r\n\r\n    try {\r\n      const response = await fetch(\r\n        // `https://rickandmortyapi.com/api/character?id.read(this.props.match.params.infoId)`\r\n        `https://rickandmortyapi.com/api/character/${parseInt(\r\n          this.props.match.params.infoId\r\n        )}`\r\n      );\r\n\r\n      const data = await response.json();\r\n      this.setState({ loading: false, data: data });\r\n    } catch (error) {\r\n      this.setState({ loading: false, error: error });\r\n    }\r\n    console.log(\r\n      `https://rickandmortyapi.com/api/character/?id=${\r\n        this.props.match.params.infoId\r\n      }`\r\n    );\r\n  };\r\n\r\n  render() {\r\n    if (this.state.loading === true) {\r\n      return <PageLoading />;\r\n    }\r\n    return (\r\n      // <div className=\"Badge\">\r\n      //   <div className=\"Badge__header\">\r\n      //     <img src={confLogo} alt=\"Logo de la conferencia\" />\r\n      //   </div>\r\n\r\n      <header class=\"masthead bg-secondary text-white text-center\">\r\n        <div class=\"container\">\r\n          <img\r\n            class=\"img-fluid mb-5 d-block mx-auto images\"\r\n            src={this.state.data.image}\r\n            alt=\"\"\r\n          />\r\n          <h1 class=\"text-uppercase mb-0\">{this.state.data.name}</h1>\r\n          <hr class=\"star-light\" />\r\n          <h2 class=\"font-weight-light mb-0\">\r\n            {this.state.data.status} - {this.state.data.gender} -\r\n            {this.state.data.species}\r\n          </h2>\r\n        </div>\r\n      </header>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Info;\r\n","import React from \"react\";\r\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\r\nimport App from \"../App\";\r\nimport Info from \"../info\";\r\n\r\nfunction Apps() {\r\n  return (\r\n    <BrowserRouter>\r\n      <Switch>\r\n        <Route exact path=\"/characters\" component={App} />\r\n        <Route exact path=\"/characters/:infoId\" component={Info} />\r\n      </Switch>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default Apps;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport Apps from \"./components/Apps\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<Apps />, document.getElementById(\"app\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/rick.700ea584.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}